from algorithm.li.extract.utils.dbutils import dbs
import os
import csv

def f():
    dis_name = open('dis_name.txt', 'r', encoding='utf8').read().split('\n')
    dis_name = set(dis_name)
    dis_school_dict = dict()
    s_sql = "SELECT school FROM `discipline_school` WHERE `name` = '%s' AND school_id IS NOT NULL"
    for name in dis_name:
        print(name)
        dis_school = [i['school'] for i in dbs.getDics(s_sql % name)]
        dis_school_dict[name] = dis_school

    re_li = list()
    csvreader = csv.reader(open('jishulingyuyuxueke.csv', 'r'))
    lingyu_xueke = [tuple(node) for node in csvreader]

    for node in lingyu_xueke:
        di = dict()
        d_list = node[1].split('-')
        for d in d_list:
            s_list = dis_school_dict[d]
            for s in s_list:
                if di.get(s):
                    di[s] += "-" + d
                else:
                    di[s] = d
        ll = list()
        for key, value in di.items():
            item = key + '(' + '/'.join(value.split('-')) + ')'
            ll.append(item)
        re_li.append('，'.join(ll))
    print(re_li)
    print(len(re_li))

    print('\n'.join(re_li))


def get_paper_data():
    begin = 0
    end = 6000000
    step = 10000
    s_sql = '''
        SELECT t1.id, t1.`name`, t1.abstract, t2.discipline_code 
        FROM paper_clean1 t1, teacher_dis_code t2 
        WHERE t2.id = t1.author_id AND t2.discipline_code like '08%%' and t1.id > %s and t1.id <= %s;
    '''
    u_sql = "INSERT paper_data(id, title, abstract, discipline) VALUES(%s, %s, %s, %s);"
    s = 0
    while begin + step <= end:
        print(s_sql % (str(begin), str(begin + step)))
        data_list = dbs.getDics(s_sql % (str(begin), str(begin + step)))

        u_list = []
        for data in data_list:
            if not (data["name"] and data["abstract"]):
                continue

            u_list.append((data["id"], data["name"], data["abstract"], data["discipline_code"]))
            if len(u_list) == 5000:
                print(dbs.exe_many(u_sql, u_list))
                u_list = []
                s += 5000

        ll = len(u_list)
        s += ll
        print(dbs.exe_many(u_sql, u_list))
        begin += step

    print(s)


def test():

    import re

    name_code = {"哲学": "0101", "马克思主义哲学": "010101", "中国哲学": "010102", "外国哲学": "010103", "逻辑学": "010104",
                 "伦理学": "010105", "美学": "010106", "宗教学": "010107", "科学技术哲学": "010108", "理论经济学": "0201",
                 "政治经济学": "020101", "经济思想史": "020102", "经济史": "020103", "西方经济学": "020104", "世界经济": "020105",
                 "人口、资源与环境经济学": "020106", "应用经济学": "0202", "国民经济学": "020201", "区域经济学": "020202", "财政学": "020203",
                 "金融学": "020204", "产业经济学": "020205", "国际贸易学": "020206", "劳动经济学": "020207", "统计学": "020208",
                 "数量经济学": "020209", "国防经济": "020210", "法学": "0301", "法学理论": "030101", "法律史": "030102",
                 "宪法学与行政法学": "030103", "刑法学": "030104", "民商法学": "030105", "诉讼法学": "030106", "经济法学": "030107",
                 "环境与资源保护法学": "030108", "国际法学": "030109", "军事法学": "030110", "政治学": "0302", "政治学理论": "030201",
                 "中外政治制度": "030202", "科学社会主义与国际共产主义运动": "030203", "中共党史": "030204", "国际政治": "030206", "国际关系": "030207",
                 "外交学": "030208", "社会学": "0303", "社会学": "030301", "人口学": "030302", "人类学": "030303", "民俗学": "030304",
                 "民族学": "0304", "民族学": "030401", "马克思主义民族理论与政策": "030402", "中国少数民族经济": "030403", "中国少数民族史": "030404",
                 "中国少数民族艺术": "030405", "马克思主义理论": "0305", "马克思主义基本原理": "030501", "马克思主义发展史": "030502",
                 "马克思主义中国化研究": "030503", "国外马克思主义研究": "030504", "思想政治教育": "030505", "教育学": "0401", "教育学原理": "040101",
                 "课程与教学论": "040102", "教育史": "040103", "比较教育学": "040104", "学前教育学": "040105", "高等教育学": "040106",
                 "成人教育学": "040107", "职业技术教育学": "040108", "特殊教育学": "040109", "教育技术学": "040110", "心理学": "0402",
                 "基础心理学": "040201", "发展与教育心理学": "040202", "应用心理学": "040203", "体育学": "0403", "体育人文社会学": "040301",
                 "运动人体科学": "040302", "体育教育训练学": "040303", "民族传统体育学": "040304", "中国语言文学": "0501", "文艺学": "050101",
                 "语言学及应用语言学": "050102", "汉语言文字学": "050103", "中国古典文献学": "050104", "中国古代文学": "050105",
                 "中国现当代文学": "050106", "中国少数民族语言文学": "050107", "比较文学与世界文学": "050108", "外国语言文学": "0502",
                 "英语语言文学": "050201", "俄语语言文学": "050202", "法语语言文学": "050203", "德语语言文学": "050204", "日语语言文学": "050205",
                 "印度语言文学": "050206", "西班牙语语言文学": "050207", "阿拉伯语语言文学": "050208", "欧洲语言文学": "050209", "亚非语言文学": "050210",
                 "外国语言学及应用语言学": "050211", "新闻传播学": "0503", "新闻学": "050301", "传播学": "050302", "艺术学": "0504",
                 "艺术学": "050401", "音乐学": "050402", "美术学": "050403", "设计艺术学": "050404", "戏剧戏曲学": "050405",
                 "电影学": "050406", "广播电视艺术学": "050407", "舞蹈学": "050408", "历史学": "0601", "史学理论及史学史": "060101",
                 "考古学及博物馆学": "060102", "历史地理学": "060103", "历史文献学": "060104", "专门史": "060105", "中国古代史": "060106",
                 "中国近现代史": "060107", "世界史": "060108", "数学": "0701", "基础数学": "070101", "计算数学": "070102",
                 "概率论与数理统计": "070103", "应用数学": "070104", "运筹学与控制论": "070105", "物理学": "0702", "理论物理": "070201",
                 "粒子物理与原子核物理": "070202", "原子与分子物理": "070203", "等离子体物理": "070204", "凝聚态物理": "070205", "声学": "070206",
                 "光学": "070207", "无线电物理": "070208", "化学": "0703", "无机化学": "070301", "分析化学": "070302", "有机化学": "070303",
                 "物理化学": "070304", "高分子化学与物理": "070305", "天文学": "0704", "天体物理": "070401", "天体测量与天体力学": "070402",
                 "地理学": "0705", "自然地理学": "070501", "人文地理学": "070502", "地图学与地理信息系统": "070503", "大气科学": "0706",
                 "气象学": "070601", "大气物理学与大气环境": "070602", "海洋科学": "0707", "物理海洋学": "070701", "海洋化学": "070702",
                 "海洋生物学": "070703", "海洋地质": "070704", "地球物理学": "0708", "固体地球物理学": "070801", "空间物理学": "070802",
                 "地质学": "0709", "矿物学、岩石学、矿床学": "070901", "地球化学": "070902", "古生物学与地层学": "070903", "构造地质学": "070904",
                 "第四纪地质学": "070905", "生物学": "0710", "植物学": "071001", "动物学": "071002", "生理学": "071003",
                 "水生生物学": "071004", "微生物学": "071005", "神经生物学": "071006", "遗传学": "071007", "发育生物学": "071008",
                 "细胞生物学": "071009", "生物化学与分子生物学": "071010", "生物物理学": "071011", "生态学": "071012", "系统科学": "0711",
                 "系统理论": "071101", "系统分析与集成": "071102", "科学技术史": "0712", "力学": "0801", "一般力学与力学基础": "080101",
                 "固体力学": "080102", "流体力学": "080103", "工程力学": "080104", "机械工程": "0802", "机械制造及其自动化": "080201",
                 "机械电子工程": "080202", "机械设计及理论": "080203", "车辆工程": "080204", "光学工程": "0803", "仪器科学与技术": "0804",
                 "精密仪器及机械": "080401", "测试计量技术及仪器": "080402", "材料科学与工程": "0805", "材料物理与化学": "080501", "材料学": "080502",
                 "材料加工工程": "080503", "冶金工程": "0806", "钢铁冶金": "080602", "有色金属冶金": "080603", "动力工程及工程热物理": "0807",
                 "工程热物理": "080701", "热能工程": "080702", "动力机械及工程": "080703", "流体机械及工程": "080704", "制冷及低温工程": "080705",
                 "化工过程机械": "080706", "电气工程": "0808", "电机与电器": "080801", "电力系统及其自动化": "080802", "高电压与绝缘技术": "080803",
                 "电力电子与电力传动": "080804", "电工理论与新技术": "080805", "电子科学与技术": "0809", "物理电子学": "080901", "电路与系统": "080902",
                 "微电子学与固体电子学": "080903", "电磁场与微波技术": "080904", "信息与通信工程": "0810", "通信与信息系统": "081001",
                 "信号与信息处理": "081002", "控制科学与工程": "0811", "控制理论与控制工程": "081101", "检测技术与自动化装置": "081102",
                 "系统工程": "081103", "模式识别与智能系统": "081104", "导航、制导与控制": "081105", "计算机科学与技术": "0812", "计算机科学技术": "0812", "计算机系统结构": "081201",
                 "计算机软件与理论": "081202", "计算机应用技术": "081203", "建筑学": "0813", "建筑历史与理论": "081301", "建筑设计及其理论": "081302",
                 "城市规划与设计": "081303", "建筑技术科学": "081304", "土木工程": "0814", "岩土工程": "081401", "结构工程": "081402",
                 "市政工程": "081403", "供热、供燃气、通风及空调工程": "081404", "防灾减灾工程及防护工程": "081405", "桥梁与隧道工程": "081406",
                 "水利工程": "0815", "水文学及水资源": "081501", "水力学及河流动力学": "081502", "水工结构工程": "081503", "水利水电工程": "081504",
                 "港口、海岸及近海工程": "081505", "测绘科学与技术": "0816", "大地测量学与测量工程": "081601", "摄影测量与遥感": "081602",
                 "地图制图学与地理信息工程": "081603", "化学工程与技术": "0817", "化学工程": "081701", "化学工艺": "081702", "生物化工": "081703",
                 "应用化学": "081704", "工业催化": "081705", "地质资源与地质工程": "0818", "矿产普查与勘探": "081801", "地球探测与信息技术": "081802",
                 "地质工程": "081803", "矿业工程": "0819", "采矿工程": "081901", "矿物加工工程": "081902", "安全技术及工程": "081903",
                 "石油与天然气工程": "0820", "油气井工程": "082001", "油气田开发工程": "082002", "油气储运工程": "082003", "纺织科学与工程": "0821",
                 "纺织工程": "082101", "纺织材料与纺织品设计": "082102", "纺织化学与染整工程": "082103", "服装设计与工程": "082104",
                 "轻工技术与工程": "0822", "制浆造纸工程": "082201", "制糖工程": "082202", "发酵工程": "082203", "皮革化学与工程": "082204",
                 "交通运输工程": "0823", "道路与铁道工程": "082301", "交通信息工程及控制": "082302", "交通运输规划与管理": "082303",
                 "载运工具运用工程": "082304", "船舶与海洋工程": "0824", "船舶与海洋结构物设计制造": "082401", "轮机工程": "082402", "水声工程": "082403",
                 "航空宇航科学与技术": "0825", "飞行器设计": "082501", "航空宇航推进理论与工程": "082502", "航空宇航制造工程": "082503",
                 "人机与环境工程": "082504", "兵器科学与技术": "0826", "武器系统与运用工程": "082601", "兵器发射理论与技术": "082602",
                 "火炮、自动武器与弹药工程": "082603", "军事化学与烟火技术": "082604", "核科学与技术": "0827", "核能科学与工程": "082701",
                 "核燃料循环与材料": "082702", "核技术及应用": "082703", "辐射防护及环境保护": "082704", "农业工程": "0828", "农业机械化工程": "082801",
                 "农业水土工程": "082802", "农业生物环境与能源工程": "082803", "农业电气化与自动化": "082804", "林业工程": "0829", "森林工程": "082901",
                 "木材科学与技术": "082902", "林产化学加工工程": "082903", "环境科学与工程": "0830", "环境科学": "083001", "环境工程": "083002",
                 "生物医学工程": "0831", "食品科学与工程": "0832", "食品科学": "083201", "粮食、油脂及植物蛋白工程": "083202",
                 "农产品加工及贮藏工程": "083203", "水产品加工及贮藏工程": "083204", "作物学": "0901", "作物栽培学与耕作学": "090101",
                 "作物遗传育种": "090102", "园艺学": "0902", "果树学": "090201", "蔬菜学": "090202", "茶学": "090203", "农业资源利用": "0903",
                 "土壤学": "090301", "植物营养学": "090302", "植物保护": "0904", "植物病理学": "090401", "农业昆虫与害虫防治": "090402",
                 "农药学": "090403", "畜牧学": "0905", "动物遗传育种与繁殖": "090501", "动物营养与饲料科学": "090502", "草业科学": "090503",
                 "特种经济动物饲养": "090504", "兽医学": "0906", "基础兽医学": "090601", "预防兽医学": "090602", "临床兽医学": "090603",
                 "林学": "0907", "林木遗传育种": "090701", "森林培育": "090702", "森林保护学": "090703", "森林经理学": "090704",
                 "野生动植物保护与利用": "090705", "园林植物与观赏园艺": "090706", "水土保持与荒漠化防治": "090707", "水产": "0908", "水产养殖": "090801",
                 "捕捞学": "090802", "渔业资源": "090803", "基础医学": "1001", "人体解剖与组织胚胎学": "100101", "免疫学": "100102",
                 "病原生物学": "100103", "病理学与病理生理学": "100104", "法医学": "100105", "放射医学": "100106", "航空、航天与航海医学": "100107",
                 "临床医学": "1002", "内科学": "100201", "儿科学": "100202", "老年医学": "100203", "神经病学": "100204",
                 "精神病与精神卫生学": "100205", "皮肤病与性病学": "100206", "影像医学与核医学": "100207", "临床检验诊断学": "100208", "护理学": "100209",
                 "外科学": "100210", "妇产科学": "100211", "眼科学": "100212", "耳鼻咽喉科学": "100213", "肿瘤学": "100214",
                 "康复医学与理疗学": "100215", "运动医学": "100216", "麻醉学": "100217", "急诊医学": "100218", "口腔医学": "1003",
                 "口腔基础医学": "100301", "口腔临床医学": "100302", "公共卫生与预防医学": "1004", "流行病与卫生统计学": "100401",
                 "劳动卫生与环境卫生学": "100402", "营养与食品卫生学": "100403", "儿少卫生与妇幼保健学": "100404", "卫生毒理学": "100405",
                 "军事预防医学": "100406", "中医学": "1005", "中医基础理论": "100501", "中医临床基础": "100502", "中医医史文献": "100503",
                 "方剂学": "100504", "中医诊断学": "100505", "中医内科学": "100506", "中医外科学": "100507", "中医骨伤科学": "100508",
                 "中医妇科学": "100509", "中医儿科学": "100510", "中医五官科学": "100511", "针灸推拿学": "100512", "民族医学": "100513",
                 "中西医结合": "1006", "中西医结合基础": "100601", "中西医结合临床": "100602", "药学": "1007", "药物化学": "100701",
                 "药剂学": "100702", "生药学": "100703", "药物分析学": "100704", "微生物与生化药学": "100705", "药理学": "100706",
                 "中药学": "1008", "军事思想及军事历史": "1101", "军事思想": "110101", "军事历史": "110102", "战略学": "1102",
                 "军事战略学": "110201", "战争动员学": "110202", "战役学": "1103", "联合战役学": "110301", "军种战役学": "110302",
                 "战术学": "1104", "合同战术学": "110401", "兵种战术学": "110402", "军队指挥学": "1105", "作战指挥学": "110501",
                 "军事运筹学": "110502", "军事通信学": "110503", "军事情报学": "110504", "密码学": "110505", "军事教育训练学": "110506",
                 "军制学": "1106", "军事组织编制学": "110601", "军队管理学": "110602", "军队政治工作学": "1107", "军事后勤学与军事装备学": "1108",
                 "军事后勤学": "110801", "后方专业勤务": "110802", "军事装备学": "110803", "管理科学与工程": "1201", "工商管理": "1202",
                 "会计学": "120201", "企业管理": "120202", "旅游管理": "120203", "技术经济及管理": "120204", "农林经济管理": "1203",
                 "农业经济管理": "120301", "林业经济管理": "120302", "公共管理": "1204", "行政管理": "120401", "社会医学与卫生事业管理": "120402",
                 "教育经济与管理": "120403", "社会保障": "120404", "土地资源管理": "120405", "图书馆、情报与档案管理": "1205", "图书馆学": "120501",
                 "情报学": "120502", "档案学": "120503", "冶金物理化学": "80601"}

    s_sql = "SELECT id, term_doc FROM paper_data WHERE term_doc IS NOT NULL AND discipline ='0812'"
    data_list = dbs.getDics(s_sql)

    word_list = []
    for data in data_list:
        term_list = eval(data['term_doc'])
        for term in term_list:
            k = term.get('k', "")
            datas = term.get("datas", [])
            for d in datas:
                dis = d.get("discipline", "")
                code = name_code.get(dis, "")
                if code != "" and re.findall('0812', code):
                    word_list.append((k, dis, code))

    fw = open('.\\test\\test_word.csv', 'w', encoding="utf8")
    fw.write("word,dis,code\n")
    word_dict = dict()
    for w in word_list:
        if word_dict.get(w, "") != "":
            continue
        word_dict[w] = 'ok'
        fw.write("%s,%s,%s\n" % (w[0], w[1], w[2]))
    fw.close()

def tt():
    from urllib import request, parse as pa

    # client_id 为官网获取的AK， client_secret 为官网获取的SK
    AK = "0zw6HYjooiU1kmkynNGqSn4T"
    SK = "u2Qag7hW2DnUkFz96on3FrDzLtVmwCDH"
    url = 'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=%s&client_secret=%s' % (AK, SK)

    headers = {
        'Content-Type': 'application/json; charset=UTF-8'
    }
    # data = bytes(pa.urlencode(dict), encoding="utf8")
    req = request.Request(url=url, headers=headers, method="GET")
    response = request.urlopen(req)
    print(response.read().decode("utf-8"))


def get_BaiDuPicExtract(url=""):
    from aip import AipOcr
    print(url)
    """ 你的 APPID AK SK """
    APP_ID = '14709450'
    API_KEY = '0zw6HYjooiU1kmkynNGqSn4T'
    SECRET_KEY = 'u2Qag7hW2DnUkFz96on3FrDzLtVmwCDH'

    client = AipOcr(APP_ID, API_KEY, SECRET_KEY)

    """读取本地图片函数"""
    def get_file_content(filePath):
        with open(filePath, 'rb') as fp:
            return fp.read()

    """ 如果有可选参数 """
    options = dict()
    options["language_type"] = "CHN_ENG"
    options["detect_direction"] = "true"
    options["detect_language"] = "true"
    options["probability"] = "true"

    """ 带参数调用通用文字识别, 图片参数为远程url图片 """
    r_json = client.basicGeneralUrl(url, options)

    """识别成功返回的json
    {'log_id': 1551369869026631207, 
    'direction': 0, 
    'words_result_num': 1, 
    'words_result': 
        [{  'words': '82-8=', 
            'probability': {'variance': 0.007439, 'average': 0.91145, 'min': 0.806046}
        }], 
    'language': -1}
    """
    print(r_json)
    words_result = r_json.get("words_result", [])
    words = None
    if words_result:
        words = words_result[0].get("words", "")
    return words


def get_codeResult(url=''):
    import re
    # url = "http://www.pss-system.gov.cn/sipopublicsearch/portal/login-showPic.shtml"
    url = 'http://www.pss-system.gov.cn/sipopublicsearch/portal/login-showPic.shtml?params=08A05FFBA4D6349DE44BD87B436D6D4E'
    r_s = get_BaiDuPicExtract(url=url)

    number_list = re.findall(r'[0-9]+', r_s)
    if len(number_list) == 2:

        op = re.findall(r'{0}(.*?){1}'.format(number_list[0], number_list[1]), r_s)[0]

        if op == "+":
            return str(int(number_list[0])+int(number_list[1]))
        elif op == "-":
            return str(int(number_list[0])+int(number_list[1]))
        elif op == "*":
            return str(int(number_list[0])*int(number_list[1]))
        elif op == "/":
            if number_list[1] == 0:
                return
            return str(int(number_list[0])/int(number_list[1]))

    return

if __name__ == "__main__":
    # test()
    # tt()
    # get_BaiDuPicExtract()
    code = get_codeResult()
    while not code:
        print(code)
        code = get_codeResult()
    print(code)
    pass
